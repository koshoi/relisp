;

(defun IS (A B N)
  (cond
    ((equal A B) t)
    (t (format t "~%FAILED ~A" N))))

(defun IS_NOT (A B N)
  (cond
    ((not (equal A B)) t)
    (t (format t "~%FAILED ~A" N))))

(defun TEST_UTILS ()
  (print "UTILS TESTING")
  (IS '(a b) '(a b) "test of test1")
  (IS '(a (a b)) '(a (a b)) "test of test3")
  (IS '(a (a b) (a) b) '(a (a b) (a) b) "test of test4")
  (IS_NOT '(a b) '(a c) "test of test5")
  (IS_NOT '(a (a b) (a) b) '(a (a b) () b) "test of test6")
  (IS (head 'a) 'a "head test1")
  (IS (head '(a)) 'a "head test2")
  (IS (head '()) nil "head test3")
  (IS (head '((a b) b)) '(a b) "head test4")
  (IS (tail 'a) nil "tail test1")
  (IS (tail '(a b)) '(b) "tail test2")
  (IS (tail '(a (a b))) '((a b)) "tail test3")
  (IS (tail '(a)) nil "tail test4")
  (IS (len '()) 0 "len test1")
  (IS (len '(a)) 1 "len test2")
  (IS (len '(a b)) 2 "len test3")
  (IS (len '(a () (b a b))) 3 "len test4")
  (IS (take 2 '()) nil "take test1")
  (IS (take 7 '(a b c d e f g)) 'g "take test2")
  (IS (take 0 '(a b c)) nil "take test3")
  (IS (take 1 '(() a)) '() "take test4")
  (IS (take -1 '(a b)) nil "take test5")
  (IS (take 2 '((a b) (b c))) '(b c) "take test6")
  (IS (drop 0 '(a b)) '(a b) "drop test1")
  (IS (drop 1 '(a b c)) '(b c) "drop test2")
  (IS (drop 2 '((a b) (a ()) (a b) b)) '((a b) b) "drop test3")
  (print "DONE TESTING"))
